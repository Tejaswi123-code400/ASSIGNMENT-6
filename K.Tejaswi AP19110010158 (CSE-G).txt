				ASSIGNMENT-6


1.#include<stdio.h>
  void main()
  {
  int a[30];
  int i,j,a,n;
  print("enter size");
  scanf("%d",&n);
  printf("enter elements");
  for(i=0;i<n;i++)
     scanf("%d",&a[i]);
      for(i=0;i<n;i++)
      {
      for(j=0;j<n;j++)
      {
      if(a[i]<a[j])
      {
      a=a[i];
      a[i]=a[j];
      a[j]=a;
      }
     }
    }
     printf("decreasing orders");
     for(i=0;i<n;i++)
     {
       printf("%d",a[i]);
     }
     int c,first,last,mid,s,L1,L2*,sum=0,p=1;
     printf("enter element");
     scanf("%d",&s);
     first=0;
     last=n-1;
     mid=(first+last)/2;
     while(first<=last)
     {
     if(a[mid]<search)
         first=middle+1;
	else if (a[mid]==search)
   	      printf("%d formed at %d",s,mid+1);
              break;
 	}
	else
	 last=mid-1;
	 mid=(first+last)/2;
	}
	if(first>last)
	{
	printf("not found");
	}
	printf("enter the locations");
	scanf("%d%d",&L1,&L2);
	for("i=L1;i=L2;i=i++)
	{
	    sum=sum+a[i];
	    p=p*a[i];
	}
	printf("sum=%d",sum);
	printf("product=%d",p);
	}



2.#include<stdio.h>
  #include<conio.h>
  int a[20],n,j,i;
  void sort(int,int),low,high,mid,b[20];
  void merge(int,int,int);
  void product();
  void main()
  {
  lns c r//i;
  printf("enter size");
  scanf("%d",&n);
  printf("enter elements");
  for(i=0;i<0,i++)
      scanf("%d",&a[i]);
  low=0; high=n-1;
  sort(low,high
  printf("after sorting");
  for(i=0;i<n;i++);
      printf("%4d",a[i]);
  product();
  getch();
  }
  void sort(int low,int high)
  {
  mid=(low+high)/2;
  if(low<high)
  {
  sort (low,mid);
  sort(mid+1,high);
  merge(low,mid,high);
  }
  void merge(int low,int mid,int high)
  {
  int L1,L2;
  for(L1=0,L2=mid,i=0;L1<=mid && L2<=high;i+p)
  {
   if(a[L1]<a[L2])
       b[i]=a[L1++];
	else
	b[i]=a[L2++);
  }
  while(L1<=mid)
      b[i++]+a[L1++];
      else
       b[i]=a[L2++];
  }
  while(L1<=mid)
       b[i++]=a[L1++];
  while(L2<=high)
       b[i++]=a[L2++];
  for(i=0;i<n;i++)
       a[j]=b[i];
  }
  void,product();
  {
  int p=1;
  int k;
  printf("enter k")
  scanf("%d",&k);
  for(i=0;i<=k;i++)
  {
     p=p*i;
  }
  printf("%d",p);
  }






3.insertion sort the data is sorted by inserting a data into an existing sorting file, 
  The process followed is elements are known before while location to place them is 
  searched.best case complexity is 0(n).


EX of selection sort:  17   6    3   13   6			

		       3    16   17  13   6

                       3    6    17  13   16

		       3    6    13  17   16

		       3    6    13  16   17


EX of insertion sort;  7    4    5    2

		       4    7    5    2

                       4    5    7    2

                       2    4    5    7



selection sort: the data is sorted by selecting and placing the consicutive elementsin sorted location.
	        the best case complexity is 0(n2).








4.#include<stdio.h>
  int main()
  {
  int a[100],n,c,d,swap;
  printf("enter size");
  scanf("%d",&n);
  printf("enter elements");
  for(c=0;c<n;c++)
  {
  scanf("%d",&a[c]);
  }
  for(c=0;c<n-1;c++);
  {
  for(d=0;d<n;d++)	
  {
  if(a[d]>a[d+1])
  {
  swap=a[d];
  a[d]=a[d+1];
  a[d+1]=swap;
  }
 }
}
printf("bubble sorted");
for(c=0;c<n;c++);
 {
    printf("%d",a[c]);
 }




i)printf("alternate elements");
  for(c=0;c<=n;c+=2)
  {
    printf("%d",a[c]);
  }
  int sum=0;p=1;




ii)for(c=1;c<=n;lc+=2)
     {
       p=p*a[c];
     }
  for(c=0;c<=n;c+=2)
     {
      s=s+a[c];
     }
  printf("sum & products=%d,%d",sum,p);




iii)int m;
    printf("enter m");
    scanf("%d",&m);
    for(c=0;c<n;c++)
    {
        if(a[c];m==0)
        {
	  printf("%d",a[c]);
	}
	else
	}
	printf("not found");







5.#include<stdio.h>
  int bs(int a[],int f; int l;int e)
       if(l>=f)
	{
	   int m=(f+l)/2;
	   if(a[m]==e)
	   {
	    retun m;
	   }
	   if(a[m]>e)
	   {
	   return m;
	   }
	   if(a[m]==e)
	   {
	   return m;
           }
	   if(a[m]>e)
	   {
	   return bs(a,f,m-1,e);
	   }
	   return bs(a,m+1,l,e);
	}
	return-1;
    }
    int main(void)
    {
    int a[]={1,4,3,2,9}
    int n=5;
    int e=9;
    int p=bs(a,0,n-1,e);
    if(p==-1)
  {
  printf("not found")
  }
  else
  {
  printf("found at %d",p);
 }
}























	










	                       





